# Application Configuration File

# Zerodha Kite Connect API Settings
# Replace YOUR_API_KEY, YOUR_USER_ID, and YOUR_API_SECRET with your actual credentials.
# The access token will be generated after the first successful login and can be stored here for subsequent runs.
# However, be cautious about storing sensitive information like API secret and access token directly in version control.
# Consider using environment variables or a more secure secrets management solution for production.
kite.api.key=YOUR_API_KEY_HERE
kite.user.id=YOUR_USER_ID_HERE
kite.api.secret=YOUR_API_SECRET_HERE
kite.access.token=YOUR_ACCESS_TOKEN_HERE_IF_ALREADY_GENERATED

# Logging Configuration
# Supported levels: SEVERE, WARNING, INFO, CONFIG, FINE, FINER, FINEST (Standard Java Util Logging levels)
log.level=INFO

# Strategy Configuration
# Comma-separated list of instrument tokens/symbols your strategies will trade.
# Example: NIFTYBANK,256265 (where 256265 might be INFY's token for Kite)
# Ensure these match what your strategies and KiteService expect.
strategy.instruments=NIFTYBANK,RELIANCE

# ORB Strategy Specific Parameters (Example - can be made more generic)
# These are not directly used by Config.java in its current skeleton form,
# but show how you might extend config for strategy parameters.
# strategy.orb.NIFTYBANK.rangeMinutes=15
# strategy.orb.NIFTYBANK.marketOpenTime=09:15
# strategy.orb.NIFTYBANK.strategyEndTime=15:00
# strategy.orb.NIFTYBANK.quantity=50
# strategy.orb.NIFTYBANK.productType=MIS
# strategy.orb.NIFTYBANK.websocketToken=260105 # Nifty Bank Index numerical token for WebSocket

# strategy.orb.RELIANCE.rangeMinutes=10
# strategy.orb.RELIANCE.websocketToken=738561 # Reliance numerical token for WebSocket
# ... and so on for other parameters.
# Accessing these would require adding specific getter methods in Config.java
# or a generic way to get prefixed properties.
